package org.jboss.ddoyle.drools.sample

import org.jboss.ddoyle.drools.sample.SimpleEvent;
import org.jboss.ddoyle.drools.sample.ChannelData
import org.jboss.ddoyle.drools.sample.SimpleEvent.Status;

global org.slf4j.Logger LOGGER;

declare SimpleEvent
    @role( event )
    @timestamp( eventDate.getTime() )
    @expires( 2d )
end

//Send the events with TO_SEND status to the output channel (wrapped in a ChannelData object).
rule "TECH-Send_to_channel."
    
    salience -1000
    when
        $ev : SimpleEvent( status==SimpleEvent.Status.TO_SEND )
    then
    	System.out.println("TO_CHANNEL: " + $ev.getIndex());
    	channels["out"].send(new ChannelData($ev, drools, null));
    	$ev.setStatus(SimpleEvent.Status.SENT);
    	update($ev);
    end

//Ignore the first 4 events of "K08" by setting the status of the events to 'FILTERED'.
rule "TECH-Ignore_first_4_K08_events"
	/*
	 * Use the reverse of the batch index
	 * We want to make sure that the first item inserted in the batch is filtered first ... otherwise the temporal logic breaks. (i.e., this before event).
	 */ 
	salience ( -$index )
	when 
    	event : SimpleEvent( status == SimpleEvent.Status.ENRICHED, code == "K08", $index : index)
    	//Count the number of events with status 'filtered' that happened before the event we now match on.
    	count : Long() from accumulate ( $s:SimpleEvent(this != event, status==SimpleEvent.Status.FILTERED, code==event.code, this before event), count( $s ) )
    	if (count.intValue() >= 4) break[greaterThan]
    then
    	System.out.println("Less than: Event index: " + $index + ", number of filtered events: " + count);
        event.setStatus(SimpleEvent.Status.FILTERED);
        update(event);
    then[greaterThan]
    	System.out.println("Greater than: Event index: " + $index + ", number of filtered events: " + count);
        event.setStatus(SimpleEvent.Status.TO_SEND);
        update(event);
    end


//Retract all filtered events once we've sent an event.
rule "TECH-rule-Retract_filtered_events_after_send."
	//salience ( -$index )
	when 
    	event: SimpleEvent( status == SimpleEvent.Status.FILTERED, code == "K08", $index : index)
        SimpleEvent( status == SimpleEvent.Status.TO_SEND , code == event.code, this after[0] event)
    then 
		retract(event);
    end
